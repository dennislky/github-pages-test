{"version":3,"file":"static/js/127.d7e3fc1a.chunk.js","mappings":"uIAAA,MAAMA,EAAkB,CACtB,CAAEC,MAAO,gBAAiBC,MAAO,OACjC,CAAED,MAAO,iBAAkBC,MAAO,OAClC,CAAED,MAAO,gBAAiBC,MAAO,SACjC,CAAED,MAAO,gBAAiBC,MAAO,QACjC,CAAED,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,eAAgBC,MAAO,OAChC,CAAED,MAAO,eAAgBC,MAAO,OAChC,CAAED,MAAO,mBAAoBC,MAAO,SACpC,CAAED,MAAO,YAAaC,MAAO,OAC7B,CAAED,MAAO,aAAcC,MAAO,OAC9B,CAAED,MAAO,oBAAqBC,MAAO,WACrC,CAAED,MAAO,mBAAoBC,MAAO,U,qOCMtC,MA+FA,GAAeC,EAAAA,EAAAA,KA/FgBC,KAC7B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC3C,YAAEK,IAAgBC,EAAAA,EAAAA,MAClBC,EAASF,EAAYG,eAE3BC,EAAAA,EAAAA,YAAU,KACRV,IACAG,EAAe,IACfE,EAAgB,GAAG,GAClB,CAACG,IA0BJ,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,QAAQ,WAAWC,GAAI,CAAEC,SAAU,IAAKC,aAAc,GAAIN,SAAA,EAC9DF,EAAAA,EAAAA,KAACS,EAAAA,EAAW,CAACH,GAAI,CAAEI,GAAI,GAAIR,UACzBF,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACL,GAAI,CAAEM,SAAU,IAAKV,SAAC,4BAEpCF,EAAAA,EAAAA,KAACa,EAAAA,EAAO,CAACC,UAAQ,KACjBd,EAAAA,EAAAA,KAACS,EAAAA,EAAW,CAACH,GAAI,CAAEI,GAAI,GAAIR,UACzBF,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACL,GAAI,CAAEM,SAAU,IAAKV,SAAC,iBAEpCC,EAAAA,EAAAA,MAACY,EAAAA,EAAW,CAACT,GAAI,CAAEU,GAAI,EAAGC,GAAI,EAAGP,GAAI,GAAIR,SAAA,EACvCF,EAAAA,EAAAA,KAACkB,EAAAA,EAAY,CACXC,QAASpC,EAAAA,EACTuB,GAAI,CAAEc,MAAO,IAAKC,EAAG,GACrBC,YAAcC,IACZvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,IAAKD,EAAQvC,MAAM,cAE/ByC,SAAUA,CAACC,EAAGzC,IAAUI,EAAiB,OAALJ,QAAK,IAALA,OAAK,EAALA,EAAOA,OAC3C0C,qBAAsBA,CAACC,EAAQ3C,IAC7B2C,EAAO3C,QAAUA,EAAMA,MAGzB4C,UAAWhC,IADLA,IAGRG,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,KAAK,QACL1B,QAAQ,YACRC,GAAI,CAAE0B,gBAAiB,QAASxB,aAAc,GAC9CyB,QApDiBC,UAEzB,GADAC,QAAQC,IAAIhD,GACPA,EAIL,IACEM,EAAgB,IAChB,IAAI2C,EAAS1C,EAAY2C,UAAUlD,GACnC,GAAIiD,EAAQ,CACV,MAAME,QAAmBF,EAAOG,sBAC1BC,QAAgBJ,EAAOK,cAAc,CAAEH,eACvCI,EAAS,CACbC,QAASxD,EACTmD,aACAE,QAASA,EAAQA,SAEnBjD,EAAe,CAACmD,KAAWpD,GAC7B,CACF,CAAE,MAAOsD,GACPV,QAAQW,MAAMD,GACdnD,EAAgBmD,EAAIE,WACtB,MAnBErD,EAAgB,6BAmBlB,EA+BQmC,UAAWhC,IAAWT,EAASc,SAChC,wBAIFT,IACCU,EAAAA,EAAAA,MAAC6C,EAAAA,EAAK,CAACC,SAAS,QAAO/C,SAAA,EACrBF,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAAAhD,SAAC,YACXT,KAGJF,GACCA,EAAY4D,KAAI,CAACR,EAAQS,IAChBT,GACLxC,EAAAA,EAAAA,MAAC6C,EAAAA,EAAK,CAACC,SAAS,UAAS/C,SAAA,EACvBF,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAAAhD,SAAC,aACZF,EAAAA,EAAAA,KAAA,UAAAE,SAAU,UAASyC,EAAOC,aAC1B5C,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAAE,SAAU,gBAAeyC,EAAOJ,gBAChCvC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAAE,SAAU,YAAWyC,EAAOF,cANCW,GAQ7B,WAGT,G,kMChGQ,MAAMC,EAInBC,WAAAA,CAAYC,GAAY,KAFxB1D,QAAS,GAGP2D,EAAAA,EAAAA,IAAmBC,KAAM,CAAEF,WAAW,IACtCE,KAAKF,UAAYA,CAEnB,CAEAG,UAAAA,GACED,KAAKE,UAAY,IAAIC,EAAAA,UACrBH,KAAKI,UAAY,IAAIC,EAAAA,UACrBL,KAAKM,YAAc,IAAIC,EAAAA,YACvBP,KAAKQ,WAAa,IAAIC,EAAAA,WACtBT,KAAKU,UAAY,IAAIC,EAAAA,UACrBX,KAAKY,UAAY,IAAIC,EAAAA,UACrBb,KAAKc,UAAY,IAAIC,EAAAA,UACrBf,KAAKgB,UAAY,IAAIC,EAAAA,UACrBjB,KAAKkB,eAAiB,IAAIC,EAAAA,eAC1BnB,KAAKoB,UAAY,IAAIC,EAAAA,UACrBrB,KAAKsB,UAAY,IAAIC,EAAAA,UACrBvB,KAAKwB,cAAgB,IAAIC,EAAAA,cACzBzB,KAAK0B,aAAe,IAAIC,EAAAA,aACxB3B,KAAK5D,QAAS,CAChB,CAEA,iBAAIC,GACF,OAAO2D,KAAK5D,MACd,CAEAyC,SAAAA,CAAUlD,GACR,OAAQA,GACN,IAAK,MACH,OAAOqE,KAAKE,UAEd,IAAK,MACH,OAAOF,KAAKI,UAEd,IAAK,QACH,OAAOJ,KAAKM,YAEd,IAAK,OACH,OAAON,KAAKQ,WAEd,IAAK,MACH,OAAOR,KAAKU,UAEd,IAAK,MACH,OAAOV,KAAKY,UAEd,IAAK,MACH,OAAOZ,KAAKc,UAEd,IAAK,MACH,OAAOd,KAAKgB,UAEd,IAAK,QACH,OAAOhB,KAAKkB,eAEd,IAAK,MACH,OAAOlB,KAAKoB,UAEd,IAAK,MACH,OAAOpB,KAAKsB,UAEd,IAAK,UACH,OAAOtB,KAAKwB,cAEd,IAAK,SACH,OAAOxB,KAAK0B,aAEd,QACE,MAAM,IAAIE,MAAM,kBAGtB,CAEAC,OAAAA,GACE7B,KAAKE,eAAY4B,EACjB9B,KAAKI,eAAY0B,EACjB9B,KAAK5D,QAAS,CAChB,ECtFK,MAAM2F,GAAeC,EAAAA,EAAAA,eAAc,IANnC,MACLnC,WAAAA,GACEG,KAAK9D,YAAc,IAAI0D,EAAYI,KACrC,IAKW7D,EAAWA,KACf8F,EAAAA,EAAAA,YAAWF,E","sources":["constants/coinTypeOptions.js","features/generatePrivateKey.js","stores/walletStore.js","stores/index.js"],"sourcesContent":["const coinTypeOptions = [\n  { label: \"BTC - Bitcoin\", value: \"BTC\" },\n  { label: \"ETH - Ethereum\", value: \"ETH\" },\n  { label: \"APTOS - Aptos\", value: \"APTOS\" },\n  { label: \"ATOM - Cosmos\", value: \"ATOM\" },\n  { label: \"EOS - EOS\", value: \"EOS\" },\n  { label: \"WAX - EOS\", value: \"WAX\" },\n  { label: \"SOL - Solana\", value: \"SOL\" },\n  { label: \"STX - Stacks\", value: \"STX\" },\n  { label: \"STARK - Starknet\", value: \"STARK\" },\n  { label: \"SUI - SUI\", value: \"SUI\" },\n  { label: \"TRX - Tron\", value: \"TRX\" },\n  { label: \"ZKSPACE - Zkspace\", value: \"ZKSPACE\" },\n  { label: \"ZKSYNC - Zkspace\", value: \"ZKSYNC\" },\n];\n\nexport { coinTypeOptions };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Typography,\n  Alert,\n  AlertTitle,\n  Autocomplete,\n  TextField,\n  Divider,\n} from \"@mui/material\";\n\nimport { coinTypeOptions } from \"../constants/coinTypeOptions\";\nimport { useStore } from \"../stores\";\n\nconst GeneratePrivateKeyCard = () => {\n  const [coinType, setCoinType] = useState();\n  const [privateKeys, setPrivateKeys] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { walletStore } = useStore();\n  const isInit = walletStore.isInitialized;\n\n  useEffect(() => {\n    setCoinType();\n    setPrivateKeys([]);\n    setErrorMessage(\"\");\n  }, [isInit]);\n\n  const generatePrivateKey = async () => {\n    console.log(coinType);\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const privateKey = await wallet.getRandomPrivateKey();\n        const address = await wallet.getNewAddress({ privateKey });\n        const object = {\n          network: coinType,\n          privateKey,\n          address: address.address,\n        };\n        setPrivateKeys([object, ...privateKeys]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n  return (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Private Key</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <Autocomplete\n            options={coinTypeOptions}\n            sx={{ width: 288, p: 1 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Coin Type\" />\n            )}\n            onChange={(_, value) => setCoinType(value?.value)}\n            isOptionEqualToValue={(option, value) =>\n              option.value === value.value\n            }\n            key={!isInit}\n            disabled={!isInit}\n          />\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n            sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n            onClick={generatePrivateKey}\n            disabled={!isInit || !coinType}\n          >\n            Generate Address\n          </Button>\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {privateKeys &&\n          privateKeys.map((object, index) => {\n            return object ? (\n              <Alert severity=\"success\" key={index}>\n                <AlertTitle>Success</AlertTitle>\n                <strong>{`Chain: ${object.network}`}</strong>\n                <br />\n                <strong>{`Private Key: ${object.privateKey}`}</strong>\n                <br />\n                <strong>{`Address: ${object.address}`}</strong>\n              </Alert>\n            ) : null;\n          })}\n      </Card>\n    </>\n  );\n};\n\nexport default observer(GeneratePrivateKeyCard);\n","import { makeAutoObservable } from \"mobx\";\n\nimport { BtcWallet } from \"@okxweb3/coin-bitcoin\";\nimport { EthWallet } from \"@okxweb3/coin-ethereum\";\nimport { AptosWallet } from \"@okxweb3/coin-aptos\";\nimport { AtomWallet } from \"@okxweb3/coin-cosmos\";\nimport { EosWallet, WaxWallet } from \"@okxweb3/coin-eos\";\nimport { SolWallet } from \"@okxweb3/coin-solana\";\nimport { StxWallet } from \"@okxweb3/coin-stacks\";\nimport { StarknetWallet } from \"@okxweb3/coin-starknet\";\nimport { SuiWallet } from \"@okxweb3/coin-sui\";\nimport { TrxWallet } from \"@okxweb3/coin-tron\";\nimport { ZkspaceWallet, ZksyncWallet } from \"@okxweb3/coin-zkspace\";\n\nexport default class WalletStore {\n  rootStore;\n  isInit = false;\n\n  constructor(rootStore) {\n    makeAutoObservable(this, { rootStore: false });\n    this.rootStore = rootStore;\n    // this.initialize();\n  }\n\n  initialize() {\n    this.btcWallet = new BtcWallet();\n    this.ethWallet = new EthWallet();\n    this.aptosWallet = new AptosWallet();\n    this.atomWallet = new AtomWallet();\n    this.eosWallet = new EosWallet();\n    this.waxWallet = new WaxWallet();\n    this.solWallet = new SolWallet();\n    this.stxWallet = new StxWallet();\n    this.starknetWallet = new StarknetWallet();\n    this.suiWallet = new SuiWallet();\n    this.trxWallet = new TrxWallet();\n    this.zkSpaceWallet = new ZkspaceWallet();\n    this.zkSyncWallet = new ZksyncWallet();\n    this.isInit = true;\n  }\n\n  get isInitialized() {\n    return this.isInit;\n  }\n\n  getWallet(coinType) {\n    switch (coinType) {\n      case \"BTC\": {\n        return this.btcWallet;\n      }\n      case \"ETH\": {\n        return this.ethWallet;\n      }\n      case \"APTOS\": {\n        return this.aptosWallet;\n      }\n      case \"ATOM\": {\n        return this.atomWallet;\n      }\n      case \"EOS\": {\n        return this.eosWallet;\n      }\n      case \"WAX\": {\n        return this.waxWallet;\n      }\n      case \"SOL\": {\n        return this.solWallet;\n      }\n      case \"STX\": {\n        return this.stxWallet;\n      }\n      case \"STARK\": {\n        return this.starknetWallet;\n      }\n      case \"SUI\": {\n        return this.suiWallet;\n      }\n      case \"TRX\": {\n        return this.trxWallet;\n      }\n      case \"ZKSPACE\": {\n        return this.zkSpaceWallet;\n      }\n      case \"ZKSYNC\": {\n        return this.zkSyncWallet;\n      }\n      default: {\n        throw new Error(\"No such wallet\");\n      }\n    }\n  }\n\n  dispose() {\n    this.btcWallet = undefined;\n    this.ethWallet = undefined;\n    this.isInit = false;\n  }\n}\n","import { createContext, useContext } from \"react\";\n\nimport WalletStore from \"./walletStore.js\";\n\nexport class RootStore {\n  constructor() {\n    this.walletStore = new WalletStore(this);\n  }\n}\n\nexport const StoreContext = createContext(new RootStore());\n\nexport const useStore = () => {\n  return useContext(StoreContext);\n};\n"],"names":["coinTypeOptions","label","value","observer","GeneratePrivateKeyCard","coinType","setCoinType","useState","privateKeys","setPrivateKeys","errorMessage","setErrorMessage","walletStore","useStore","isInit","isInitialized","useEffect","_jsx","_Fragment","children","_jsxs","Card","variant","sx","minWidth","borderRadius","CardContent","pb","Typography","fontSize","Divider","flexItem","CardActions","pl","pr","Autocomplete","options","width","p","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","disabled","Button","size","backgroundColor","onClick","async","console","log","wallet","getWallet","privateKey","getRandomPrivateKey","address","getNewAddress","object","network","err","error","toString","Alert","severity","AlertTitle","map","index","WalletStore","constructor","rootStore","makeAutoObservable","this","initialize","btcWallet","BtcWallet","ethWallet","EthWallet","aptosWallet","AptosWallet","atomWallet","AtomWallet","eosWallet","EosWallet","waxWallet","WaxWallet","solWallet","SolWallet","stxWallet","StxWallet","starknetWallet","StarknetWallet","suiWallet","SuiWallet","trxWallet","TrxWallet","zkSpaceWallet","ZkspaceWallet","zkSyncWallet","ZksyncWallet","Error","dispose","undefined","StoreContext","createContext","useContext"],"sourceRoot":""}