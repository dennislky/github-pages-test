{"version":3,"file":"static/js/826.7b473ab8.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoAutocomplete.js","components/DemoDialog.js","components/DemoWalletInfo.js","features/generatePrivateKey.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { useStore } from \"../stores\";\n\nconst DemoAutocomplete = ({ setCoinType }) => {\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const coinTypeOptions = walletStore.coinTypeMapping.map((data) => {\n    return {\n      network: data.network,\n      label: `${data.network} - ${data.label}`,\n      value: data.label,\n    };\n  });\n  return (\n    <Autocomplete\n      options={coinTypeOptions}\n      sx={{ width: 288, p: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Coin Type\" />}\n      onChange={(_, value) => setCoinType(value?.value)}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete\"\n    />\n  );\n};\n\nexport { DemoAutocomplete };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { Grid, Alert, AlertTitle, Divider, IconButton } from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport \"./DemoWalletInfo.css\";\nimport { useStore } from \"../stores\";\nimport { observer } from \"mobx-react-lite\";\n\nconst contentCopy = (walletInfo, appStore) => {\n  navigator.clipboard.writeText(JSON.stringify(walletInfo));\n  appStore.snackBarMessage = \"Copied to clipboard\";\n  appStore.openSnackBar = true;\n};\nconst deleteWalletInfo = (callback, appStore) => {\n  appStore.snackBarMessage = \"Address deleted\";\n  appStore.openSnackBar = true;\n  callback();\n};\nconst DemoWalletInfo = ({ walletInfo, index, callback }) => {\n  const { appStore } = useStore();\n  return (\n    <>\n      <Alert\n        severity=\"success\"\n        key={`wallet-info-${index}`}\n        data-testid={`wallet-info-${index}`}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <AlertTitle>Success</AlertTitle>\n          </Grid>\n          <Grid item>\n            <IconButton>\n              <ContentCopyIcon\n                size=\"small\"\n                onClick={() => contentCopy(walletInfo, appStore)}\n              />\n            </IconButton>\n            <IconButton>\n              <DeleteIcon\n                size=\"small\"\n                onClick={() => deleteWalletInfo(callback, appStore)}\n              />\n            </IconButton>\n          </Grid>\n        </Grid>\n        {walletInfo.coinType && (\n          <strong>{`Chain: ${walletInfo.coinType}`}</strong>\n        )}\n        {walletInfo.derivedPath && (\n          <>\n            <br />\n            <strong>{`Derivation Path: ${walletInfo.derivedPath}`}</strong>\n          </>\n        )}\n        {walletInfo.privateKey && (\n          <>\n            <br />\n            <strong>{`Private Key: ${walletInfo.privateKey}`}</strong>\n          </>\n        )}\n        {walletInfo.address && (\n          <>\n            <br />\n            <strong>{`Address: ${walletInfo.address}`}</strong>{\" \"}\n          </>\n        )}\n        {walletInfo.publicKey && (\n          <>\n            <br />\n            <strong>{`Public Key: ${walletInfo.publicKey}`}</strong>\n          </>\n        )}\n      </Alert>\n      <Divider flexItem key=\"divider\" />\n    </>\n  );\n};\n\nexport default observer(DemoWalletInfo);\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n} from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoAutocomplete } from \"../components/DemoAutocomplete\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport DemoWalletInfo from \"../components/DemoWalletInfo\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GeneratePrivateKeyCard = () => {\n  // local UI state\n  const [coinType, setCoinType] = useState();\n  const [walletInfos, setWalletInfos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const isInit = walletStore.isInit;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setCoinType();\n    setWalletInfos([]);\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n\n  // feature logic\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex((walletInfo) => walletInfo.coinType === coinType) >\n      -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const privateKey = await wallet.getRandomPrivateKey();\n        const address = await wallet.getNewAddress({ privateKey });\n        const walletInfo = {\n          coinType,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        setWalletInfos([walletInfo, ...walletInfos]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n  const deletePrivateKey = (index) => {\n    setWalletInfos(walletInfos.toSpliced(index, 1));\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"generate-private-key-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Private Key</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <DemoAutocomplete setCoinType={setCoinType} />\n          <CardActionButton\n            buttonText=\"Generate Address\"\n            onClick={generatePrivateKey}\n            disabled={!isInit || !coinType}\n            testId=\"generate-address\"\n          />\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {walletInfos &&\n          walletInfos.map((walletInfo, index) => {\n            return walletInfo ? (\n              <DemoWalletInfo\n                walletInfo={walletInfo}\n                index={index}\n                callback={deletePrivateKey}\n              />\n            ) : null;\n          })}\n      </Card>\n      <DemoDialog\n        title={\"Already created\"}\n        content={\n          \"The Private Key is already created, please try other coin types!\"\n        }\n        showDialog={showDialog}\n        handleConfirm={handleDialogClose}\n      />\n    </>\n  ) : null;\n};\n\nexport default observer(GeneratePrivateKeyCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","DemoAutocomplete","setCoinType","walletStore","useStore","coinTypeOptions","coinTypeMapping","map","data","network","label","value","Autocomplete","options","width","p","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","groupBy","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","observer","walletInfo","index","callback","appStore","_Fragment","Alert","severity","Grid","container","spacing","item","xs","AlertTitle","IconButton","ContentCopyIcon","contentCopy","navigator","clipboard","writeText","JSON","stringify","snackBarMessage","openSnackBar","DeleteIcon","deleteWalletInfo","coinType","derivedPath","privateKey","address","publicKey","Divider","flexItem","GeneratePrivateKeyCard","useState","walletInfos","setWalletInfos","errorMessage","setErrorMessage","setShowDialog","isInit","useEffect","deletePrivateKey","toSpliced","Card","minWidth","CardContent","pb","Typography","fontSize","CardActions","pl","pr","async","findIndex","wallet","getWallet","getRandomPrivateKey","getNewAddress","Object","assign","err","console","error","toString","DemoWalletInfo","handleDialogClose"],"sourceRoot":""}