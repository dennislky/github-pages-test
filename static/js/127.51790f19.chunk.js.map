{"version":3,"file":"static/js/127.51790f19.chunk.js","mappings":"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","sources":["constants/coinTypeOptions.js","features/generatePrivateKey.js","stores/walletStore.js","stores/index.js"],"sourcesContent":["const coinTypeOptions = [\n  { label: \"BTC - Bitcoin\", value: \"BTC\" },\n  { label: \"TBTC - Bitcoin\", value: \"TBTC\" },\n  { label: \"ETH - Ethereum\", value: \"ETH\" },\n  { label: \"ETH - Goerli\", value: \"GOERLI\" },\n  { label: \"ETH - OKTC\", value: \"OKTC\" },\n  { label: \"APTOS - Aptos\", value: \"APTOS\" },\n  { label: \"ATOM - Cosmos\", value: \"ATOM\" },\n  { label: \"EOS - EOS\", value: \"EOS\" },\n  { label: \"SOL - Solana\", value: \"SOL\" },\n  { label: \"STX - Stacks\", value: \"STX\" },\n  { label: \"STARK - Starknet\", value: \"STARK\" },\n  { label: \"SUI - SUI\", value: \"SUI\" },\n  { label: \"TRX - Tron\", value: \"TRX\" },\n  { label: \"ZKSPACE - Zkspace\", value: \"ZKSPACE\" },\n  { label: \"ZKSYNC - Zkspace\", value: \"ZKSYNC\" },\n];\n\nexport { coinTypeOptions };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Button,\n  Typography,\n  Alert,\n  AlertTitle,\n  Autocomplete,\n  TextField,\n  Divider,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nimport { coinTypeOptions } from \"../constants/coinTypeOptions\";\nimport { useStore } from \"../stores\";\n\nconst GeneratePrivateKeyCard = () => {\n  const [coinType, setCoinType] = useState();\n  const [walletInfos, setWalletInfos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  const { walletStore } = useStore();\n  const isInit = walletStore.isInitialized;\n\n  useEffect(() => {\n    setCoinType();\n    setWalletInfos([]);\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  const confirmDialog = () => {\n    setShowDialog(false);\n  };\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex((walletInfo) => walletInfo.coinType === coinType) >\n      -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const privateKey = await wallet.getRandomPrivateKey();\n        const address = await wallet.getNewAddress({ privateKey });\n        const walletInfo = {\n          coinType,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        setWalletInfos([...walletInfos, walletInfo]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n  return isInit ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Private Key</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <Autocomplete\n            options={coinTypeOptions}\n            sx={{ width: 288, p: 1 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Coin Type\" />\n            )}\n            onChange={(_, value) => setCoinType(value?.value)}\n            isOptionEqualToValue={(option, value) =>\n              option.value === value.value\n            }\n            key={!isInit}\n            disabled={!isInit}\n          />\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n            sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n            onClick={generatePrivateKey}\n            disabled={!isInit || !coinType}\n          >\n            Generate Address\n          </Button>\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {walletInfos &&\n          walletInfos.map((walletInfo, index) => {\n            return walletInfo ? (\n              <>\n                <Alert severity=\"success\" key={index}>\n                  <AlertTitle>Success</AlertTitle>\n                  <strong>{`Chain: ${walletInfo.coinType}`}</strong>\n                  <br />\n                  <strong>{`Private Key: ${walletInfo.privateKey}`}</strong>\n                  <br />\n                  <strong>{`Address: ${walletInfo.address}`}</strong>\n                  <br />\n                  <strong>{`Public Key: ${walletInfo.publicKey}`}</strong>\n                </Alert>\n                <Divider flexItem key=\"divider\" />\n              </>\n            ) : null;\n          })}\n      </Card>\n      <Dialog\n        open={showDialog}\n        onClose={confirmDialog}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Already created</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            The Private Key is already created, please try other coin types!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={confirmDialog} autoFocus>\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  ) : null;\n};\n\nexport default observer(GeneratePrivateKeyCard);\n","import { makeAutoObservable } from \"mobx\";\n\nimport { BtcWallet, TBtcWallet } from \"@okxweb3/coin-bitcoin\";\nimport { EthWallet } from \"@okxweb3/coin-ethereum\";\nimport { AptosWallet } from \"@okxweb3/coin-aptos\";\nimport { AtomWallet } from \"@okxweb3/coin-cosmos\";\nimport { EosWallet } from \"@okxweb3/coin-eos\";\nimport { SolWallet } from \"@okxweb3/coin-solana\";\nimport { StxWallet } from \"@okxweb3/coin-stacks\";\nimport { StarknetWallet } from \"@okxweb3/coin-starknet\";\nimport { SuiWallet } from \"@okxweb3/coin-sui\";\nimport { TrxWallet } from \"@okxweb3/coin-tron\";\nimport { ZkspaceWallet, ZksyncWallet } from \"@okxweb3/coin-zkspace\";\n\nexport default class WalletStore {\n  rootStore;\n  isInit = false;\n\n  constructor(rootStore) {\n    makeAutoObservable(this, { rootStore: false });\n    this.rootStore = rootStore;\n    // this.initialize();\n  }\n\n  initialize() {\n    this.btcWallet = new BtcWallet();\n    this.tbtcWallet = new TBtcWallet();\n    this.ethWallet = new EthWallet();\n    this.goerliWallet = new EthWallet();\n    this.oktcWallet = new EthWallet();\n    this.aptosWallet = new AptosWallet();\n    this.atomWallet = new AtomWallet();\n    this.eosWallet = new EosWallet();\n    this.solWallet = new SolWallet();\n    this.stxWallet = new StxWallet();\n    this.starknetWallet = new StarknetWallet();\n    this.suiWallet = new SuiWallet();\n    this.trxWallet = new TrxWallet();\n    this.zkSpaceWallet = new ZkspaceWallet();\n    this.zkSyncWallet = new ZksyncWallet();\n    this.isInit = true;\n  }\n\n  get isInitialized() {\n    return this.isInit;\n  }\n\n  getWallet(coinType) {\n    switch (coinType) {\n      case \"BTC\": {\n        return this.btcWallet;\n      }\n      case \"TBTC\": {\n        return this.tbtcWallet;\n      }\n      case \"ETH\": {\n        return this.ethWallet;\n      }\n      case \"GOERLI\": {\n        return this.goerliWallet;\n      }\n      case \"OKTC\": {\n        return this.oktcWallet;\n      }\n      case \"APTOS\": {\n        return this.aptosWallet;\n      }\n      case \"ATOM\": {\n        return this.atomWallet;\n      }\n      case \"EOS\": {\n        return this.eosWallet;\n      }\n      case \"SOL\": {\n        return this.solWallet;\n      }\n      case \"STX\": {\n        return this.stxWallet;\n      }\n      case \"STARK\": {\n        return this.starknetWallet;\n      }\n      case \"SUI\": {\n        return this.suiWallet;\n      }\n      case \"TRX\": {\n        return this.trxWallet;\n      }\n      case \"ZKSPACE\": {\n        return this.zkSpaceWallet;\n      }\n      case \"ZKSYNC\": {\n        return this.zkSyncWallet;\n      }\n      default: {\n        throw new Error(\"No such wallet\");\n      }\n    }\n  }\n\n  dispose() {\n    this.btcWallet = undefined;\n    this.ethWallet = undefined;\n    this.isInit = false;\n  }\n}\n","import { createContext, useContext } from \"react\";\n\nimport WalletStore from \"./walletStore.js\";\n\nexport class RootStore {\n  constructor() {\n    this.walletStore = new WalletStore(this);\n  }\n}\n\nexport const StoreContext = createContext(new RootStore());\n\nexport const useStore = () => {\n  return useContext(StoreContext);\n};\n"],"names":["coinTypeOptions","label","value","observer","GeneratePrivateKeyCard","coinType","setCoinType","useState","walletInfos","setWalletInfos","errorMessage","setErrorMessage","showDialog","setShowDialog","walletStore","useStore","isInit","isInitialized","useEffect","confirmDialog","_jsxs","_Fragment","children","Card","variant","sx","minWidth","borderRadius","_jsx","CardContent","pb","Typography","fontSize","Divider","flexItem","CardActions","pl","pr","Autocomplete","options","width","p","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","disabled","Button","size","backgroundColor","onClick","async","findIndex","walletInfo","wallet","getWallet","privateKey","getRandomPrivateKey","address","getNewAddress","publicKey","Object","assign","err","console","error","toString","Alert","severity","AlertTitle","map","index","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","WalletStore","constructor","rootStore","makeAutoObservable","this","initialize","btcWallet","BtcWallet","tbtcWallet","TBtcWallet","ethWallet","EthWallet","goerliWallet","oktcWallet","aptosWallet","AptosWallet","atomWallet","AtomWallet","eosWallet","EosWallet","solWallet","SolWallet","stxWallet","StxWallet","starknetWallet","StarknetWallet","suiWallet","SuiWallet","trxWallet","TrxWallet","zkSpaceWallet","ZkspaceWallet","zkSyncWallet","ZksyncWallet","Error","dispose","undefined","StoreContext","createContext","useContext"],"sourceRoot":""}