{"version":3,"file":"static/js/435.472d4f92.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoAutocomplete.js","components/DemoDialog.js","components/DemoWalletInfo.js","features/generateMnenomic.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({\n  buttonText,\n  onClick,\n  disabled = false,\n  testId = \"\",\n}) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={onClick}\n      disabled={disabled}\n      data-testid={testId}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import { Autocomplete, TextField } from \"@mui/material\";\n\nimport { useStore } from \"../stores\";\n\nconst DemoAutocomplete = ({ setCoinType }) => {\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const coinTypeOptions = walletStore.coinTypeMapping.map((data) => {\n    return {\n      network: data.network,\n      label: `${data.network} - ${data.label}`,\n      value: data.label,\n    };\n  });\n  return (\n    <Autocomplete\n      options={coinTypeOptions}\n      sx={{ width: 288, p: 1 }}\n      renderInput={(params) => <TextField {...params} label=\"Coin Type\" />}\n      onChange={(_, value) => setCoinType(value?.value)}\n      isOptionEqualToValue={(option, value) => option.value === value.value}\n      groupBy={(option) => option.network}\n      data-testid=\"autocomplete\"\n    />\n  );\n};\n\nexport { DemoAutocomplete };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { Grid, Alert, AlertTitle, Divider, IconButton } from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport \"./DemoWalletInfo.css\";\nimport { useStore } from \"../stores\";\nimport { observer } from \"mobx-react-lite\";\n\nconst contentCopy = (walletInfo, appStore) => {\n  navigator.clipboard.writeText(JSON.stringify(walletInfo));\n  appStore.snackBarMessage = \"Copied to clipboard\";\n  appStore.openSnackBar = true;\n};\nconst deleteWalletInfo = (callback, appStore) => {\n  appStore.snackBarMessage = \"Address deleted\";\n  appStore.openSnackBar = true;\n  callback();\n};\nconst DemoWalletInfo = ({ walletInfo, index, callback }) => {\n  const { appStore } = useStore();\n  return (\n    <>\n      <Alert\n        severity=\"success\"\n        key={`wallet-info-${index}`}\n        data-testid={`wallet-info-${index}`}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <AlertTitle>Success</AlertTitle>\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => contentCopy(walletInfo, appStore)}>\n              <ContentCopyIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => deleteWalletInfo(callback, appStore)}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n        {walletInfo.coinType && (\n          <strong>{`Chain: ${walletInfo.coinType}`}</strong>\n        )}\n        {walletInfo.derivedPath && (\n          <>\n            <br />\n            <strong>{`Derivation Path: ${walletInfo.derivedPath}`}</strong>\n          </>\n        )}\n        {walletInfo.privateKey && (\n          <>\n            <br />\n            <strong>{`Private Key: ${walletInfo.privateKey}`}</strong>\n          </>\n        )}\n        {walletInfo.address && (\n          <>\n            <br />\n            <strong>{`Address: ${walletInfo.address}`}</strong>{\" \"}\n          </>\n        )}\n        {walletInfo.publicKey && (\n          <>\n            <br />\n            <strong>{`Public Key: ${walletInfo.publicKey}`}</strong>\n          </>\n        )}\n      </Alert>\n      <Divider flexItem key=\"divider\" />\n    </>\n  );\n};\n\nexport default observer(DemoWalletInfo);\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Divider,\n  Grid,\n  IconButton,\n} from \"@mui/material\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport { bip39 } from \"@okxweb3/crypto-lib\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoAutocomplete } from \"../components/DemoAutocomplete\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport DemoWalletInfo from \"../components/DemoWalletInfo\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GenerateMnenomicCard = () => {\n  // local UI state\n  const [coinType, setCoinType] = useState();\n  const [mnenomic, setMnenomic] = useState();\n  const [walletInfos, setWalletInfos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore, appStore } = useStore();\n  const isInit = walletStore.isInit;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setCoinType();\n    setMnenomic();\n    setWalletInfos([]);\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n  const contentCopy = (mnenomic, appStore) => {\n    navigator.clipboard.writeText(mnenomic);\n    appStore.snackBarMessage = \"Copied to clipboard\";\n    appStore.openSnackBar = true;\n  };\n\n  // feature logic\n  const generateMnenomic = async () => {\n    try {\n      const result = await bip39.generateMnemonic();\n      setMnenomic(result);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex((walletInfo) => walletInfo.coinType === coinType) >\n      -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const derivedPath = await wallet.getDerivedPath({ index: 0 });\n        const privateKey = await wallet.getDerivedPrivateKey({\n          mnenomic,\n          hdPath: derivedPath,\n        });\n        const address = await wallet.getNewAddress({ privateKey });\n        const walletInfo = {\n          coinType,\n          derivedPath,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        setWalletInfos([walletInfo, ...walletInfos]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n  const deletePrivateKey = (index) => {\n    setWalletInfos(walletInfos.toSpliced(index, 1));\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card\n        variant=\"outlined\"\n        sx={{ minWidth: 275, borderRadius: 5 }}\n        key=\"generate-mnenomic-card\"\n      >\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Mnenomic</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20, pb: 1 }}>Mnenomic</Typography>\n        </CardContent>\n        <CardContent\n          sx={{\n            py: 1,\n            mx: 2,\n            borderRadius: 2,\n            backgroundColor: \"#f7f7f7\",\n          }}\n        >\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs>\n              {mnenomic ? (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                  }}\n                >\n                  {mnenomic}\n                </Typography>\n              ) : (\n                <Typography\n                  sx={{\n                    minHeight: 24,\n                    fontSize: 16,\n                    color: \"#929292\",\n                  }}\n                >\n                  {`Click \"Generate Mnenomic\" to randomly generate mnenomic`}\n                </Typography>\n              )}\n            </Grid>\n            <Grid item>\n              {mnenomic ? (\n                <IconButton onClick={() => contentCopy(mnenomic, appStore)}>\n                  <ContentCopyIcon />\n                </IconButton>\n              ) : null}\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions sx={{ p: 2 }}>\n          <CardActionButton\n            buttonText=\"Generate Mnenomic\"\n            onClick={generateMnenomic}\n            disabled={!isInit || !!mnenomic}\n            testId=\"generate-mnenomic\"\n          />\n        </CardActions>\n        {!!mnenomic && (\n          <>\n            <CardContent sx={{ pb: 0 }}>\n              <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n            </CardContent>\n            <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n              <DemoAutocomplete setCoinType={setCoinType} />\n              <CardActionButton\n                buttonText=\"Derive Address\"\n                onClick={generatePrivateKey}\n                disabled={!isInit || !mnenomic || !coinType}\n                testId=\"derive-address\"\n              />\n            </CardActions>\n            {errorMessage && (\n              <Alert severity=\"error\">\n                <AlertTitle>Failure</AlertTitle>\n                {errorMessage}\n              </Alert>\n            )}\n            {walletInfos &&\n              walletInfos.map((walletInfo, index) => {\n                return walletInfo ? (\n                  <DemoWalletInfo\n                    walletInfo={walletInfo}\n                    index={index}\n                    callback={deletePrivateKey}\n                  />\n                ) : null;\n              })}\n          </>\n        )}\n      </Card>\n      <DemoDialog\n        title={\"Already created\"}\n        content={\n          \"The Private Key is already created, please try other coin types!\"\n        }\n        showDialog={showDialog}\n        handleConfirm={handleDialogClose}\n      ></DemoDialog>\n    </>\n  ) : null;\n};\n\nexport default observer(GenerateMnenomicCard);\n"],"names":["CardActionButton","_ref","buttonText","onClick","disabled","testId","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","children","DemoAutocomplete","setCoinType","walletStore","useStore","coinTypeOptions","coinTypeMapping","map","data","network","label","value","Autocomplete","options","width","p","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","groupBy","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","observer","walletInfo","index","callback","appStore","_Fragment","Alert","severity","Grid","container","spacing","item","xs","AlertTitle","IconButton","contentCopy","navigator","clipboard","writeText","JSON","stringify","snackBarMessage","openSnackBar","ContentCopyIcon","fontSize","deleteWalletInfo","DeleteIcon","coinType","derivedPath","privateKey","address","publicKey","Divider","flexItem","GenerateMnenomicCard","useState","mnenomic","setMnenomic","walletInfos","setWalletInfos","errorMessage","setErrorMessage","setShowDialog","isInit","useEffect","deletePrivateKey","toSpliced","Card","minWidth","CardContent","pb","Typography","py","mx","alignItems","minHeight","color","CardActions","async","result","bip39","generateMnemonic","err","console","error","pl","pr","findIndex","wallet","getWallet","getDerivedPath","getDerivedPrivateKey","hdPath","getNewAddress","Object","assign","toString","DemoWalletInfo","handleDialogClose"],"sourceRoot":""}