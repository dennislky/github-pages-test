{"version":3,"file":"static/js/127.a66b7b12.chunk.js","mappings":"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","sources":["components/CardActionButton.js","components/DemoDialog.js","components/DemoWalletInfo.js","constants/coinTypeOptions.js","features/generatePrivateKey.js","stores/walletStore.js","stores/index.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({ buttonText, handleClick, disabled = false }) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={handleClick}\n      disabled={disabled}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { Alert, AlertTitle, Divider } from \"@mui/material\";\n\nconst DemoWalletInfo = ({ walletInfo, index }) => {\n  return (\n    <>\n      <Alert severity=\"success\" key={index}>\n        <AlertTitle>Success</AlertTitle>\n        {walletInfo.coinType && (\n          <strong>{`Chain: ${walletInfo.coinType}`}</strong>\n        )}\n        {walletInfo.derivedPath && (\n          <>\n            <br />\n            <strong>{`Derivation Path: ${walletInfo.derivedPath}`}</strong>\n          </>\n        )}\n        {walletInfo.privateKey && (\n          <>\n            <br />\n            <strong>{`Private Key: ${walletInfo.privateKey}`}</strong>\n          </>\n        )}\n        {walletInfo.address && (\n          <>\n            <br />\n            <strong>{`Address: ${walletInfo.address}`}</strong>{\" \"}\n          </>\n        )}\n        {walletInfo.publicKey && (\n          <>\n            <br />\n            <strong>{`Public Key: ${walletInfo.publicKey}`}</strong>\n          </>\n        )}\n      </Alert>\n      <Divider flexItem key=\"divider\" />\n    </>\n  );\n};\n\nexport { DemoWalletInfo };\n","const coinTypeOptions = [\n  { label: \"BTC - Bitcoin\", value: \"BTC\" },\n  { label: \"TBTC - Bitcoin\", value: \"TBTC\" },\n  { label: \"ETH - Ethereum\", value: \"ETH\" },\n  { label: \"ETH - Goerli\", value: \"GOERLI\" },\n  { label: \"ETH - OKTC\", value: \"OKTC\" },\n  { label: \"APTOS - Aptos\", value: \"APTOS\" },\n  { label: \"ATOM - Cosmos\", value: \"ATOM\" },\n  { label: \"EOS - EOS\", value: \"EOS\" },\n  { label: \"SOL - Solana\", value: \"SOL\" },\n  { label: \"STX - Stacks\", value: \"STX\" },\n  { label: \"STARK - Starknet\", value: \"STARK\" },\n  { label: \"SUI - SUI\", value: \"SUI\" },\n  { label: \"TRX - Tron\", value: \"TRX\" },\n  { label: \"ZKSPACE - Zkspace\", value: \"ZKSPACE\" },\n  { label: \"ZKSYNC - Zkspace\", value: \"ZKSYNC\" },\n];\n\nexport { coinTypeOptions };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Alert,\n  AlertTitle,\n  Autocomplete,\n  TextField,\n  Divider,\n} from \"@mui/material\";\n\nimport { coinTypeOptions } from \"../constants/coinTypeOptions\";\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport { DemoWalletInfo } from \"../components/DemoWalletInfo\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst GeneratePrivateKeyCard = () => {\n  // local UI state\n  const [coinType, setCoinType] = useState();\n  const [walletInfos, setWalletInfos] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const isInit = walletStore.isInitialized;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setCoinType();\n    setWalletInfos([]);\n    setErrorMessage(\"\");\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const handleDialogClose = () => {\n    setShowDialog(false);\n  };\n\n  // feature logic\n  const generatePrivateKey = async () => {\n    if (!coinType) {\n      setErrorMessage(\"Please select a coin type!\");\n      return;\n    }\n    if (\n      walletInfos.findIndex((walletInfo) => walletInfo.coinType === coinType) >\n      -1\n    ) {\n      setShowDialog(true);\n      return;\n    }\n    try {\n      setErrorMessage(\"\");\n      let wallet = walletStore.getWallet(coinType);\n      if (wallet) {\n        const privateKey = await wallet.getRandomPrivateKey();\n        const address = await wallet.getNewAddress({ privateKey });\n        const walletInfo = {\n          coinType,\n          privateKey,\n          address: address.address,\n        };\n        if (address.publicKey) {\n          Object.assign(walletInfo, {\n            publicKey: address.publicKey,\n          });\n        }\n        setWalletInfos([...walletInfos, walletInfo]);\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.toString());\n    }\n  };\n\n  // render logic\n  return isInit ? (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography sx={{ fontSize: 26 }}>Generate Private Key</Typography>\n        </CardContent>\n        <Divider flexItem />\n        <CardContent sx={{ pb: 0 }}>\n          <Typography sx={{ fontSize: 20 }}>Coin Type</Typography>\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          <Autocomplete\n            options={coinTypeOptions}\n            sx={{ width: 288, p: 1 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Coin Type\" />\n            )}\n            onChange={(_, value) => setCoinType(value?.value)}\n            isOptionEqualToValue={(option, value) =>\n              option.value === value.value\n            }\n            key={!isInit}\n            disabled={!isInit}\n          />\n          <CardActionButton\n            buttonText=\"Generate Address\"\n            handleClick={generatePrivateKey}\n            disabled={!isInit || !coinType}\n          />\n        </CardActions>\n        {errorMessage && (\n          <Alert severity=\"error\">\n            <AlertTitle>Failure</AlertTitle>\n            {errorMessage}\n          </Alert>\n        )}\n        {walletInfos &&\n          walletInfos.map((walletInfo, index) => {\n            return walletInfo ? (\n              <DemoWalletInfo walletInfo={walletInfo} index={index} />\n            ) : null;\n          })}\n      </Card>\n      <DemoDialog\n        title={\"Already created\"}\n        content={\n          \"The Private Key is already created, please try other coin types!\"\n        }\n        showDialog={showDialog}\n        handleConfirm={handleDialogClose}\n      />\n    </>\n  ) : null;\n};\n\nexport default observer(GeneratePrivateKeyCard);\n","import { makeAutoObservable } from \"mobx\";\n\nimport { BtcWallet, TBtcWallet } from \"@okxweb3/coin-bitcoin\";\nimport { EthWallet } from \"@okxweb3/coin-ethereum\";\nimport { AptosWallet } from \"@okxweb3/coin-aptos\";\nimport { AtomWallet } from \"@okxweb3/coin-cosmos\";\nimport { EosWallet } from \"@okxweb3/coin-eos\";\nimport { SolWallet } from \"@okxweb3/coin-solana\";\nimport { StxWallet } from \"@okxweb3/coin-stacks\";\nimport { StarknetWallet } from \"@okxweb3/coin-starknet\";\nimport { SuiWallet } from \"@okxweb3/coin-sui\";\nimport { TrxWallet } from \"@okxweb3/coin-tron\";\nimport { ZkspaceWallet, ZksyncWallet } from \"@okxweb3/coin-zkspace\";\n\nexport default class WalletStore {\n  rootStore;\n  isInit = false;\n\n  constructor(rootStore) {\n    makeAutoObservable(this, { rootStore: false });\n    this.rootStore = rootStore;\n    // this.initialize();\n  }\n\n  initialize() {\n    this.btcWallet = new BtcWallet();\n    this.tbtcWallet = new TBtcWallet();\n    this.ethWallet = new EthWallet();\n    this.goerliWallet = new EthWallet();\n    this.oktcWallet = new EthWallet();\n    this.aptosWallet = new AptosWallet();\n    this.atomWallet = new AtomWallet();\n    this.eosWallet = new EosWallet();\n    this.solWallet = new SolWallet();\n    this.stxWallet = new StxWallet();\n    this.starknetWallet = new StarknetWallet();\n    this.suiWallet = new SuiWallet();\n    this.trxWallet = new TrxWallet();\n    this.zkSpaceWallet = new ZkspaceWallet();\n    this.zkSyncWallet = new ZksyncWallet();\n    this.isInit = true;\n  }\n\n  get isInitialized() {\n    return this.isInit;\n  }\n\n  getWallet(coinType) {\n    switch (coinType) {\n      case \"BTC\": {\n        return this.btcWallet;\n      }\n      case \"TBTC\": {\n        return this.tbtcWallet;\n      }\n      case \"ETH\": {\n        return this.ethWallet;\n      }\n      case \"GOERLI\": {\n        return this.goerliWallet;\n      }\n      case \"OKTC\": {\n        return this.oktcWallet;\n      }\n      case \"APTOS\": {\n        return this.aptosWallet;\n      }\n      case \"ATOM\": {\n        return this.atomWallet;\n      }\n      case \"EOS\": {\n        return this.eosWallet;\n      }\n      case \"SOL\": {\n        return this.solWallet;\n      }\n      case \"STX\": {\n        return this.stxWallet;\n      }\n      case \"STARK\": {\n        return this.starknetWallet;\n      }\n      case \"SUI\": {\n        return this.suiWallet;\n      }\n      case \"TRX\": {\n        return this.trxWallet;\n      }\n      case \"ZKSPACE\": {\n        return this.zkSpaceWallet;\n      }\n      case \"ZKSYNC\": {\n        return this.zkSyncWallet;\n      }\n      default: {\n        throw new Error(\"No such wallet\");\n      }\n    }\n  }\n\n  dispose() {\n    this.btcWallet = undefined;\n    this.ethWallet = undefined;\n    this.isInit = false;\n  }\n}\n","import { createContext, useContext } from \"react\";\n\nimport WalletStore from \"./walletStore.js\";\n\nexport class RootStore {\n  constructor() {\n    this.walletStore = new WalletStore(this);\n  }\n}\n\nexport const StoreContext = createContext(new RootStore());\n\nexport const useStore = () => {\n  return useContext(StoreContext);\n};\n"],"names":["CardActionButton","_ref","buttonText","handleClick","disabled","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","onClick","children","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","DemoWalletInfo","walletInfo","index","_Fragment","Alert","severity","AlertTitle","coinType","derivedPath","privateKey","address","publicKey","Divider","flexItem","coinTypeOptions","label","value","observer","GeneratePrivateKeyCard","setCoinType","useState","walletInfos","setWalletInfos","errorMessage","setErrorMessage","setShowDialog","walletStore","useStore","isInit","isInitialized","useEffect","Card","minWidth","CardContent","pb","Typography","fontSize","CardActions","pl","pr","Autocomplete","options","width","p","renderInput","params","TextField","onChange","_","isOptionEqualToValue","option","async","findIndex","wallet","getWallet","getRandomPrivateKey","getNewAddress","Object","assign","err","console","error","toString","map","handleDialogClose","WalletStore","constructor","rootStore","makeAutoObservable","this","initialize","btcWallet","BtcWallet","tbtcWallet","TBtcWallet","ethWallet","EthWallet","goerliWallet","oktcWallet","aptosWallet","AptosWallet","atomWallet","AtomWallet","eosWallet","EosWallet","solWallet","SolWallet","stxWallet","StxWallet","starknetWallet","StarknetWallet","suiWallet","SuiWallet","trxWallet","TrxWallet","zkSpaceWallet","ZkspaceWallet","zkSyncWallet","ZksyncWallet","Error","dispose","undefined","StoreContext","createContext","useContext"],"sourceRoot":""}