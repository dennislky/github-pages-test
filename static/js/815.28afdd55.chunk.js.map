{"version":3,"file":"static/js/815.28afdd55.chunk.js","mappings":"iKAEA,MAAMA,EAAmBC,IAAoD,IAAnD,WAAEC,EAAU,YAAEC,EAAW,SAAEC,GAAW,GAAOH,EACrE,OACEI,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAQ,YACRC,GAAI,CAAEC,gBAAiB,QAASC,aAAc,GAC9CC,QAAST,EACTC,SAAUA,EAASS,SAElBX,GACM,C,gICHb,MAAMY,EAAab,IAQZ,IARa,MAClBc,EAAK,QACLC,EAAO,gBACPC,EAAkB,KAAI,kBACtBC,EAAoB,MAAK,WACzBC,GAAa,EAAK,YAClBC,EAAW,cACXC,GACDpB,EACC,OACEqB,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,KAAML,EACNM,QAASL,GAAeC,EACxB,kBAAgB,qBAChB,mBAAiB,2BAA0BR,SAAA,EAE3CR,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,CAACC,GAAG,qBAAoBd,SAAEE,KACtCV,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAAAf,UACZR,EAAAA,EAAAA,KAACwB,EAAAA,EAAiB,CAACF,GAAG,2BAA0Bd,SAC7CG,OAGLM,EAAAA,EAAAA,MAACQ,EAAAA,EAAa,CAAAjB,SAAA,CACXO,IACCf,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACM,QAASQ,EAAYP,SAAEI,KAEjCZ,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACM,QAASS,EAAeU,WAAS,EAAAlB,SACtCK,SAGE,C,8KC7Bb,MA+DA,GAAec,EAAAA,EAAAA,KA/DKC,KAElB,MAAOd,EAAYe,IAAiBC,EAAAA,EAAAA,WAAS,IAGvC,YAAEC,IAAgBC,EAAAA,EAAAA,MAClBC,EAASF,EAAYE,QAG3BC,EAAAA,EAAAA,YAAU,KACRL,GAAc,EAAM,GACnB,CAACI,IAoBJ,OACEhB,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAA3B,SAAA,EACES,EAAAA,EAAAA,MAACmB,EAAAA,EAAI,CAACjC,QAAQ,WAAWC,GAAI,CAAEiC,SAAU,IAAK/B,aAAc,GAAIE,SAAA,EAC9DS,EAAAA,EAAAA,MAACqB,EAAAA,EAAW,CAAClC,GAAI,CAAEmC,GAAI,GAAI/B,SAAA,EACzBR,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACC,QAAQ,SAASrC,GAAI,CAAEsC,SAAU,IAAKlC,SAAC,mBAGlDyB,IACCjC,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACC,QAAQ,SAASrC,GAAI,CAAEsC,SAAU,GAAIC,MAAO,QAASnC,SAC9D,uBAIPR,EAAAA,EAAAA,KAAC4C,EAAAA,EAAW,CAACxC,GAAI,CAAEyC,GAAI,EAAGC,GAAI,EAAGP,GAAI,GAAI/B,SACrCyB,GAGAjC,EAAAA,EAAAA,KAACL,EAAAA,EAAgB,CAACE,WAAW,UAAUC,YAtBjCiD,KACdlB,GAAc,EAAK,KAmBX7B,EAAAA,EAAAA,KAACL,EAAAA,EAAgB,CAACE,WAAW,aAAaC,YAvBpCkD,KACdjB,EAAYkB,YAAY,UA4BtBjD,EAAAA,EAAAA,KAACS,EAAAA,EAAU,CACTC,MAAO,gBACPC,QAAS,yDACTG,WAAYA,EACZC,YAtCcmC,KAClBrB,GAAc,EAAM,EAsChBb,cA3CgBmC,KACpBpB,EAAYgB,UACZlB,GAAc,EAAM,MA2CjB,G,kMCjCQ,MAAMuB,EAKnBC,WAAAA,CAAYC,GAAY,KAHxBC,gBAAkB,GAAG,KACrBtB,QAAS,GAGPuB,EAAAA,EAAAA,IAAmBC,KAAM,CAAEH,WAAW,IACtCG,KAAKH,UAAYA,CACnB,CAEAL,UAAAA,GAEEQ,KAAKC,UAAY,IAAIC,EAAAA,UACrBF,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKC,YAEfD,KAAKQ,UAAY,IAAIC,EAAAA,UACrBT,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKQ,YAEfR,KAAKU,UAAY,IAAIC,EAAAA,UACrBX,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKU,YAEfV,KAAKY,UAAY,IAAIC,EAAAA,UACrBb,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKY,YAEfZ,KAAKc,WAAa,IAAIC,EAAAA,WACtBf,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKc,aAEfd,KAAKgB,WAAa,IAAIC,EAAAA,WACtBjB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKgB,aAEfhB,KAAKkB,WAAa,IAAIC,EAAAA,WACtBnB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,YACPC,MAAO,YACPC,OAAQP,KAAKkB,aAIflB,KAAKoB,UAAY,IAAIC,EAAAA,UACrBrB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,KACPC,MAAO,eACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,gBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,aACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,cACPC,MAAO,YACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,cACPC,MAAO,eACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,gBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,YACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,eACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,gBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,cACPC,MAAO,iBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,QACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,SACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,eACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,SACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,eACPC,MAAO,aACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,QACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,QACPC,MAAO,QACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,YACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,YACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,gBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,OACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,KACPC,MAAO,WACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,QACPC,MAAO,QACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,QACPC,MAAO,UACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,gBACPC,MAAO,gBACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,QACPC,MAAO,cACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,UACPC,MAAO,UACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,aACPC,MAAO,aACPC,OAAQP,KAAKoB,YAEfpB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,aACPC,OAAQP,KAAKoB,YAIfpB,KAAKsB,WAAa,IAAIC,EAAAA,WACtBvB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKsB,aAEftB,KAAKwB,aAAe,IAAIC,EAAAA,aACxBzB,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKwB,eAEfxB,KAAK0B,aAAe,IAAIC,EAAAA,aACxB3B,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAK0B,eAEf1B,KAAK4B,WAAa,IAAIC,EAAAA,WACtB7B,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,UACPC,OAAQP,KAAK4B,aAEf5B,KAAK8B,YAAc,IAAIC,EAAAA,YACvB/B,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,QACPC,MAAO,QACPC,OAAQP,KAAK8B,cAEf9B,KAAKgC,WAAa,IAAIC,EAAAA,WACtBjC,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKgC,aAEfhC,KAAKkC,WAAa,IAAIC,EAAAA,WACtBnC,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKkC,aAEflC,KAAKoC,WAAa,IAAIC,EAAAA,WACtBrC,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,OACPC,OAAQP,KAAKoC,aAEfpC,KAAKsC,aAAe,IAAIC,EAAAA,aACxBvC,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,SACPC,OAAQP,KAAKsC,eAEftC,KAAKwC,aAAe,IAAIC,EAAAA,aACxBzC,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,SACPC,OAAQP,KAAKwC,eAEfxC,KAAK0C,UAAY,IAAIC,EAAAA,UACrB3C,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAK0C,YAEf1C,KAAK4C,eAAiB,IAAIC,EAAAA,eAC1B7C,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,QACPC,MAAO,WACPC,OAAQP,KAAK4C,iBAEf5C,KAAK8C,YAAc,IAAIC,EAAAA,YACvB/C,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,OACPC,MAAO,QACPC,OAAQP,KAAK8C,cAIf9C,KAAKgD,YAAc,IAAIC,EAAAA,YACvBjD,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,QACTC,MAAO,QACPC,MAAO,QACPC,OAAQP,KAAKgD,cAGfhD,KAAKkD,UAAY,IAAIC,EAAAA,UACrBnD,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAKkD,YAGflD,KAAKoD,UAAY,IAAIC,EAAAA,UACrBrD,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKoD,YAGfpD,KAAKsD,UAAY,IAAIC,EAAAA,UACrBvD,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,SACPC,OAAQP,KAAKsD,YAGftD,KAAKwD,eAAiB,IAAIC,EAAAA,eAC1BzD,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,QACTC,MAAO,QACPC,MAAO,WACPC,OAAQP,KAAKwD,iBAGfxD,KAAK0D,UAAY,IAAIC,EAAAA,UACrB3D,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,MACPC,MAAO,MACPC,OAAQP,KAAK0D,YAGf1D,KAAK4D,UAAY,IAAIC,EAAAA,UACrB7D,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,MACTC,MAAO,OACPC,MAAO,MACPC,OAAQP,KAAK4D,YAGf5D,KAAK8D,cAAgB,IAAIC,EAAAA,cACzB/D,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,UACTC,MAAO,UACPC,MAAO,UACPC,OAAQP,KAAK8D,gBAGf9D,KAAKgE,aAAe,IAAIC,EAAAA,aACxBjE,KAAKF,gBAAgBK,KAAK,CACxBC,QAAS,SACTC,MAAO,SACPC,MAAO,UACPC,OAAQP,KAAKgE,eAGfhE,KAAKxB,QAAS,CAChB,CAEA0F,SAAAA,CAAUC,GAER,OADanE,KAAKF,gBAAgBsE,MAAMC,GAASA,EAAKhE,QAAU8D,IACpD5D,MACd,CAEAjB,OAAAA,GACEU,KAAKF,gBAAkB,GACvBE,KAAKxB,QAAS,CAChB,EC1eK,MAAM8F,GAAeC,EAAAA,EAAAA,eAAc,IANnC,MACL3E,WAAAA,GACEI,KAAK1B,YAAc,IAAIqB,EAAYK,KACrC,IAKWzB,EAAWA,KACfiG,EAAAA,EAAAA,YAAWF,E","sources":["components/CardActionButton.js","components/DemoDialog.js","features/initSDK.js","stores/walletStore.js","stores/index.js"],"sourcesContent":["import { Button } from \"@mui/material\";\n\nconst CardActionButton = ({ buttonText, handleClick, disabled = false }) => {\n  return (\n    <Button\n      size=\"small\"\n      variant=\"contained\"\n      sx={{ backgroundColor: \"black\", borderRadius: 2 }}\n      onClick={handleClick}\n      disabled={disabled}\n    >\n      {buttonText}\n    </Button>\n  );\n};\n\nexport { CardActionButton };\n","import {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n} from \"@mui/material\";\n\nconst DemoDialog = ({\n  title,\n  content,\n  closeButtonText = \"No\",\n  confirmButtonText = \"Yes\",\n  showDialog = false,\n  handleClose,\n  handleConfirm,\n}) => {\n  return (\n    <Dialog\n      open={showDialog}\n      onClose={handleClose || handleConfirm}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {content}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {handleClose && (\n          <Button onClick={handleClose}>{closeButtonText}</Button>\n        )}\n        <Button onClick={handleConfirm} autoFocus>\n          {confirmButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport { DemoDialog };\n","import { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Card, CardContent, CardActions, Typography } from \"@mui/material\";\n\nimport { CardActionButton } from \"../components/CardActionButton\";\nimport { DemoDialog } from \"../components/DemoDialog\";\nimport { useStore } from \"../stores\";\n\n// card per feature\nconst InitSDKCard = () => {\n  // local UI state\n  const [showDialog, setShowDialog] = useState(false);\n\n  // mobx store that link up with sdk wallets\n  const { walletStore } = useStore();\n  const isInit = walletStore.isInit;\n\n  // local UI state cleanup when sdk re-initialized\n  useEffect(() => {\n    setShowDialog(false);\n  }, [isInit]);\n\n  // event handler\n  const confirmDialog = () => {\n    walletStore.dispose();\n    setShowDialog(false);\n  };\n  const closeDialog = () => {\n    setShowDialog(false);\n  };\n\n  // feature logic\n  const initSDK = () => {\n    walletStore.initialize();\n  };\n  const dispose = () => {\n    setShowDialog(true);\n  };\n\n  // render logic\n  return (\n    <>\n      <Card variant=\"outlined\" sx={{ minWidth: 275, borderRadius: 5 }}>\n        <CardContent sx={{ pb: 1 }}>\n          <Typography display=\"inline\" sx={{ fontSize: 26 }}>\n            OKX Wallet SDK\n          </Typography>\n          {isInit && (\n            <Typography display=\"inline\" sx={{ fontSize: 14, color: \"blue\" }}>\n              {\" (Initialized)\"}\n            </Typography>\n          )}\n        </CardContent>\n        <CardActions sx={{ pl: 2, pr: 2, pb: 2 }}>\n          {!isInit ? (\n            <CardActionButton buttonText=\"Initialize\" handleClick={initSDK} />\n          ) : (\n            <CardActionButton buttonText=\"Dispose\" handleClick={dispose} />\n          )}\n        </CardActions>\n      </Card>\n      <DemoDialog\n        title={\"Are you sure?\"}\n        content={\"The Mnenomics and Private Keys generated will be lost!\"}\n        showDialog={showDialog}\n        handleClose={closeDialog}\n        handleConfirm={confirmDialog}\n      />\n    </>\n  );\n};\n\nexport default observer(InitSDKCard);\n","import { makeAutoObservable } from \"mobx\";\n\nimport {\n  BtcWallet,\n  TBtcWallet,\n  UsdtWallet,\n  LtcWallet,\n  BchWallet,\n  BsvWallet,\n  DogeWallet,\n} from \"@okxweb3/coin-bitcoin\";\nimport { EthWallet } from \"@okxweb3/coin-ethereum\";\nimport { AptosWallet } from \"@okxweb3/coin-aptos\";\nimport {\n  AtomWallet,\n  OsmoWallet,\n  EvmosWallet,\n  AxelarWallet,\n  CronosWallet,\n  IrisWallet,\n  JunoWallet,\n  KavaWallet,\n  KujiraWallet,\n  SecretWallet,\n  StargazeWallet,\n  TerraWallet,\n  SeiWallet,\n} from \"@okxweb3/coin-cosmos\";\nimport { EosWallet } from \"@okxweb3/coin-eos\";\nimport { SolWallet } from \"@okxweb3/coin-solana\";\nimport { StxWallet } from \"@okxweb3/coin-stacks\";\nimport { StarknetWallet } from \"@okxweb3/coin-starknet\";\nimport { SuiWallet } from \"@okxweb3/coin-sui\";\nimport { TrxWallet } from \"@okxweb3/coin-tron\";\nimport { ZkspaceWallet, ZksyncWallet } from \"@okxweb3/coin-zkspace\";\n\nexport default class WalletStore {\n  rootStore;\n  coinTypeMapping = [];\n  isInit = false;\n\n  constructor(rootStore) {\n    makeAutoObservable(this, { rootStore: false });\n    this.rootStore = rootStore;\n  }\n\n  initialize() {\n    // BTC network wallets, need to reference what wallets @okxweb3/coin-bitcoin provide, methods provided per different wallets are different too\n    this.btcWallet = new BtcWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"BTC\",\n      label: \"BTC\",\n      wallet: this.btcWallet,\n    });\n    this.bchWallet = new BchWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"BCH\",\n      label: \"BCH\",\n      wallet: this.bchWallet,\n    });\n    this.bsvWallet = new BsvWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"BSV\",\n      label: \"BSV\",\n      wallet: this.bsvWallet,\n    });\n    this.ltcWallet = new LtcWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"LTC\",\n      label: \"LTC\",\n      wallet: this.ltcWallet,\n    });\n    this.dogeWallet = new DogeWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"DOGE\",\n      label: \"Doge\",\n      wallet: this.dogeWallet,\n    });\n    this.tbtcWallet = new TBtcWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"TBTC\",\n      label: \"TBTC\",\n      wallet: this.tbtcWallet,\n    });\n    this.usdtWallet = new UsdtWallet();\n    this.coinTypeMapping.push({\n      network: \"BTC\",\n      token: \"OMNI-USDT\",\n      label: \"Omni USDT\",\n      wallet: this.usdtWallet,\n    });\n\n    // ETH network wallets, basically all methods provided per token are the same\n    this.ethWallet = new EthWallet();\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ETH\",\n      label: \"ETH\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"A1\",\n      label: \"Arbitrum One\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"NOVA\",\n      label: \"Arbitrum Nova\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"AVAX\",\n      label: \"Avalance C\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"BOBA\",\n      label: \"Boba\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"BNB (ERC20)\",\n      label: \"BNB Chain\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"CORE\",\n      label: \"Core\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"CRO (ERC20)\",\n      label: \"Cronos (EVM)\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"CELO\",\n      label: \"Celo\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"CFX\",\n      label: \"Conflux (EVM)\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ACE\",\n      label: \"Endurance\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ETHW\",\n      label: \"Ethereum PoW\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ETHF\",\n      label: \"Ethereum Fair\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"FIL (ERC20)\",\n      label: \"Filecoin (EVM)\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"FTM\",\n      label: \"Fantom\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"FLR\",\n      label: \"Flare\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"GNO\",\n      label: \"Gnosis\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"GETH\",\n      label: \"Goerli\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"HAQQ\",\n      label: \"HAQQ Network\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"KLAY\",\n      label: \"Klaytn\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"KCS\",\n      label: \"KCC\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"KAVA (ERC20)\",\n      label: \"Kava (EVM)\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"TBA\",\n      label: \"Linea\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"METIS\",\n      label: \"Metis\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"GLMR\",\n      label: \"Moonebeam\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"MOVR\",\n      label: \"Moonriver\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"MNT\",\n      label: \"Mantle\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"OMN\",\n      label: \"Omega Network\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"OKT\",\n      label: \"OKTC\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"OP\",\n      label: \"Optimism\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"OPBNB\",\n      label: \"opBNB\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"MATIC\",\n      label: \"Polygon\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"MATIC (zkEVM)\",\n      label: \"Polygon zkEVM\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"PULSE\",\n      label: \"Pulse Chain\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"SEPOLIA\",\n      label: \"Sepolia\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ZKSYNC-ERA\",\n      label: \"zkSync Era\",\n      wallet: this.ethWallet,\n    });\n    this.coinTypeMapping.push({\n      network: \"ETH\",\n      token: \"ZETA\",\n      label: \"Zeta Chain\",\n      wallet: this.ethWallet,\n    });\n\n    // COSMOS network wallets, need to reference what wallets @okxweb3/coin-cosmos provide, methods provided per different wallets are different too\n    this.atomWallet = new AtomWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"ATOM\",\n      label: \"Atom\",\n      wallet: this.atomWallet,\n    });\n    this.axelarWallet = new AxelarWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"AXL\",\n      label: \"Axelar\",\n      wallet: this.axelarWallet,\n    });\n    this.cronosWallet = new CronosWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"CRO\",\n      label: \"Cronos\",\n      wallet: this.cronosWallet,\n    });\n    this.osmoWallet = new OsmoWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"OSMO\",\n      label: \"Osmosis\",\n      wallet: this.osmoWallet,\n    });\n    this.evmosWallet = new EvmosWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"EVMOS\",\n      label: \"Evmos\",\n      wallet: this.evmosWallet,\n    });\n    this.irisWallet = new IrisWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"IRIS\",\n      label: \"Iris\",\n      wallet: this.irisWallet,\n    });\n    this.junoWallet = new JunoWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"JUNO\",\n      label: \"Juno\",\n      wallet: this.junoWallet,\n    });\n    this.kavaWallet = new KavaWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"KAVA\",\n      label: \"Kava\",\n      wallet: this.kavaWallet,\n    });\n    this.kujiraWallet = new KujiraWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"KUJI\",\n      label: \"Kujira\",\n      wallet: this.kujiraWallet,\n    });\n    this.secretWallet = new SecretWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"SCRT\",\n      label: \"Secret\",\n      wallet: this.secretWallet,\n    });\n    this.seiWallet = new SeiWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"SEI\",\n      label: \"Sei\",\n      wallet: this.seiWallet,\n    });\n    this.stargazeWallet = new StargazeWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"STARS\",\n      label: \"Stargaze\",\n      wallet: this.stargazeWallet,\n    });\n    this.terraWallet = new TerraWallet();\n    this.coinTypeMapping.push({\n      network: \"COSMOS\",\n      token: \"LUNA\",\n      label: \"Terra\",\n      wallet: this.terraWallet,\n    });\n\n    // wallets other than BTC, ETH & COSMOS networks\n    this.aptosWallet = new AptosWallet();\n    this.coinTypeMapping.push({\n      network: \"APTOS\",\n      token: \"APTOS\",\n      label: \"Aptos\",\n      wallet: this.aptosWallet,\n    });\n\n    this.eosWallet = new EosWallet();\n    this.coinTypeMapping.push({\n      network: \"EOS\",\n      token: \"EOS\",\n      label: \"EOS\",\n      wallet: this.eosWallet,\n    });\n\n    this.solWallet = new SolWallet();\n    this.coinTypeMapping.push({\n      network: \"SOL\",\n      token: \"SOL\",\n      label: \"Solana\",\n      wallet: this.solWallet,\n    });\n\n    this.stxWallet = new StxWallet();\n    this.coinTypeMapping.push({\n      network: \"STX\",\n      token: \"STX\",\n      label: \"Stacks\",\n      wallet: this.stxWallet,\n    });\n\n    this.starknetWallet = new StarknetWallet();\n    this.coinTypeMapping.push({\n      network: \"STARK\",\n      token: \"STARK\",\n      label: \"Starknet\",\n      wallet: this.starknetWallet,\n    });\n\n    this.suiWallet = new SuiWallet();\n    this.coinTypeMapping.push({\n      network: \"SUI\",\n      token: \"SUI\",\n      label: \"SUI\",\n      wallet: this.suiWallet,\n    });\n\n    this.trxWallet = new TrxWallet();\n    this.coinTypeMapping.push({\n      network: \"TRX\",\n      token: \"TRON\",\n      label: \"TRX\",\n      wallet: this.trxWallet,\n    });\n\n    this.zkSpaceWallet = new ZkspaceWallet();\n    this.coinTypeMapping.push({\n      network: \"ZKSPACE\",\n      token: \"ZKSPACE\",\n      label: \"Zkspace\",\n      wallet: this.zkSpaceWallet,\n    });\n\n    this.zkSyncWallet = new ZksyncWallet();\n    this.coinTypeMapping.push({\n      network: \"ZKSYNC\",\n      token: \"ZKSYNC\",\n      label: \"Zkspace\",\n      wallet: this.zkSyncWallet,\n    });\n\n    this.isInit = true;\n  }\n\n  getWallet(coinType) {\n    const data = this.coinTypeMapping.find((data) => data.token === coinType);\n    return data.wallet;\n  }\n\n  dispose() {\n    this.coinTypeMapping = [];\n    this.isInit = false;\n  }\n}\n","import { createContext, useContext } from \"react\";\n\nimport WalletStore from \"./walletStore.js\";\n\nexport class RootStore {\n  constructor() {\n    this.walletStore = new WalletStore(this);\n  }\n}\n\nexport const StoreContext = createContext(new RootStore());\n\nexport const useStore = () => {\n  return useContext(StoreContext);\n};\n"],"names":["CardActionButton","_ref","buttonText","handleClick","disabled","_jsx","Button","size","variant","sx","backgroundColor","borderRadius","onClick","children","DemoDialog","title","content","closeButtonText","confirmButtonText","showDialog","handleClose","handleConfirm","_jsxs","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","observer","InitSDKCard","setShowDialog","useState","walletStore","useStore","isInit","useEffect","_Fragment","Card","minWidth","CardContent","pb","Typography","display","fontSize","color","CardActions","pl","pr","dispose","initSDK","initialize","closeDialog","confirmDialog","WalletStore","constructor","rootStore","coinTypeMapping","makeAutoObservable","this","btcWallet","BtcWallet","push","network","token","label","wallet","bchWallet","BchWallet","bsvWallet","BsvWallet","ltcWallet","LtcWallet","dogeWallet","DogeWallet","tbtcWallet","TBtcWallet","usdtWallet","UsdtWallet","ethWallet","EthWallet","atomWallet","AtomWallet","axelarWallet","AxelarWallet","cronosWallet","CronosWallet","osmoWallet","OsmoWallet","evmosWallet","EvmosWallet","irisWallet","IrisWallet","junoWallet","JunoWallet","kavaWallet","KavaWallet","kujiraWallet","KujiraWallet","secretWallet","SecretWallet","seiWallet","SeiWallet","stargazeWallet","StargazeWallet","terraWallet","TerraWallet","aptosWallet","AptosWallet","eosWallet","EosWallet","solWallet","SolWallet","stxWallet","StxWallet","starknetWallet","StarknetWallet","suiWallet","SuiWallet","trxWallet","TrxWallet","zkSpaceWallet","ZkspaceWallet","zkSyncWallet","ZksyncWallet","getWallet","coinType","find","data","StoreContext","createContext","useContext"],"sourceRoot":""}